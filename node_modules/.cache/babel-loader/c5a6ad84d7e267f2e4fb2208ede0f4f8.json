{"ast":null,"code":"var _jsxFileName = \"/Users/reshmydevaraju/Development/_charlie/src/pages/students/students-list/students-list.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport StudentsTopNav from \"./students-top-nav/students-top-nav\";\nimport StudentTable from \"./student-table/student-table\";\nimport StudentSearchBar from './student-searchbar/student-searchbar';\nimport \"./students-list.scss\";\nimport Data from \"../../../data/students.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst StudentsList = () => {\n  _s();\n\n  const [studentsData, setStudentsData] = useState([]);\n  const [pageData, setPageData] = useState([]);\n  const [pageNumber, setPageNumber] = useState(1);\n  const [numberOfRows, setNumberOfRows] = useState(8);\n  const [totalNumberStudents, setTotalNumberStudents] = useState(studentsData.length);\n  const [enrolledFilter, setEnrolledFilter] = useState(\"All\");\n  const [toggleView, setToggleView] = useState(false);\n  const [enrollmentData, setEnrollmentData] = useState(Data);\n  const [sortOption, setSortOption] = useState(\"1\");\n  const [filterOption, setFilterOption] = useState(\"1\");\n\n  const fetchStudentData = () => {\n    setStudentsData(Data.sort((a, b) => a.studentName.localeCompare(b.studentName)));\n  };\n\n  const changeToGridView = () => {\n    setToggleView(true);\n    setPageNumber(1);\n  };\n\n  const changeToBurgerView = () => {\n    setToggleView(false);\n    setPageNumber(1);\n  };\n\n  const changeNumberOfRows = e => {\n    setPageNumber(1);\n    setNumberOfRows(e.target.value);\n  };\n\n  const displayStudents = () => {\n    const firstSliceIndex = numberOfRows * pageNumber - numberOfRows;\n    const secondSliceIndex = numberOfRows * pageNumber;\n    setPageData(studentsData.slice(firstSliceIndex, secondSliceIndex));\n    setTotalNumberStudents(studentsData.length);\n  };\n\n  const switchToNextPage = () => {\n    let newPageNumber = pageNumber + 1;\n\n    if (newPageNumber - 1 !== Math.ceil(totalNumberStudents / numberOfRows)) {\n      setPageNumber(newPageNumber);\n      displayStudents(newPageNumber);\n    }\n  };\n\n  const switchToPreviousPage = () => {\n    const newPageNumber = pageNumber - 1;\n\n    if (newPageNumber !== 0) {\n      setPageNumber(newPageNumber);\n      displayStudents(newPageNumber);\n    }\n  };\n\n  const filterDataByAll = () => {\n    setSortOption(\"1\");\n    setFilterOption(\"1\");\n    setPageNumber(1);\n    setEnrolledFilter(\"All\");\n    fetchStudentData();\n    setEnrollmentData(Data);\n  };\n\n  const filterDataByFullTime = () => {\n    setSortOption(\"1\");\n    setFilterOption(\"1\");\n    setPageNumber(1);\n    setEnrolledFilter(\"Full-Time\");\n    setStudentsData(Data.filter(student => student.enrolledType.includes(\"Full-Time\")));\n    setEnrollmentData(Data.filter(student => student.enrolledType.includes(\"Full-Time\")));\n  };\n\n  const filterDataBySelfPaced = () => {\n    setSortOption(\"1\");\n    setFilterOption(\"1\");\n    setPageNumber(1);\n    setEnrolledFilter(\"Self-Paced\");\n    setStudentsData(Data.filter(student => student.enrolledType.includes(\"Self-Paced\")));\n    setEnrollmentData(Data.filter(student => student.enrolledType.includes(\"Self-Paced\")));\n  };\n\n  const filterDataByCorporate = () => {\n    setSortOption(\"1\");\n    setFilterOption(\"1\");\n    setEnrolledFilter(\"Corporate\");\n    setPageNumber(1);\n    setStudentsData(Data.filter(student => student.enrolledType.includes(\"Corporate\")));\n    setEnrollmentData(Data.filter(student => student.enrolledType.includes(\"Corporate\")));\n  };\n\n  const generateSearchResults = e => {\n    if (e.target.value) {\n      setPageNumber(1);\n      const filteredData = enrollmentData.filter(student => {\n        return student.studentName.toLowerCase().includes(e.target.value.toLowerCase()) || student.enrolledOn.toLowerCase().includes(e.target.value.toLowerCase()) || student.githubAccount.toLowerCase().includes(e.target.value.toLowerCase()) || student.portfolio.toLowerCase().includes(e.target.value.toLowerCase());\n      });\n      setStudentsData(filteredData);\n    } else {\n      switch (enrolledFilter) {\n        case \"All\":\n          filterDataByAll();\n          break;\n\n        case \"Self-Paced\":\n          filterDataBySelfPaced();\n          break;\n\n        case \"Full-Time\":\n          filterDataByFullTime();\n          break;\n\n        case \"Corporate\":\n          filterDataByCorporate();\n          break;\n\n        default:\n          filterDataByAll();\n      }\n    }\n  }; // Sorting logic (A-Z, Z-A) - THIS NEEDS FIXING // needs fixing man-0--\n\n\n  const sortStudents = e => {\n    if (e.target.value === \"1\") {\n      setSortOption(\"1\");\n      const studentCopy = [...studentsData];\n      studentCopy.sort((a, b) => a.studentName.localeCompare(b.studentName));\n      setStudentsData(studentCopy);\n    } else if (e.target.value === \"2\") {\n      setSortOption(\"2\");\n      const studentCopy = [...studentsData];\n      studentCopy.sort((a, b) => a.studentName.localeCompare(b.studentName)).reverse();\n      setStudentsData(studentCopy);\n    }\n  };\n\n  const filterStudentsByCourse = e => {\n    if (e.target.value === \"1\") {\n      setFilterOption(\"1\");\n      setStudentsData(enrollmentData);\n    } else if (e.target.value === \"2\") {\n      setFilterOption(\"2\");\n      setStudentsData(enrollmentData.filter(student => student.enrolledOn.includes(\"Mariana\")));\n    } else if (e.target.value === \"3\") {\n      setFilterOption(\"3\");\n      setStudentsData(enrollmentData.filter(student => student.enrolledOn.includes(\"Ibiza\")));\n    } else if (e.target.value === \"4\") {\n      setFilterOption(\"4\");\n      setStudentsData(enrollmentData.filter(student => student.enrolledOn.includes(\"Jersey\")));\n    } else {\n      setFilterOption(\"5\");\n      setStudentsData(enrollmentData.filter(student => student.enrolledOn.includes(\"Hawaii\")));\n    }\n  }; // useEffect Calls\n\n\n  useEffect(fetchStudentData, []);\n  useEffect(displayStudents, [studentsData, pageNumber, numberOfRows]); // The following logic is for the row selection portion of the PageNavigator component. It is placed here as PageNavigator is a presentational component. \n\n  const firstIndex = numberOfRows * pageNumber - numberOfRows;\n  let secondIndex;\n  pageData.length < numberOfRows ? secondIndex = pageData.length + firstIndex : secondIndex = numberOfRows * pageNumber;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main col-10 m-0 d-flex justify-content-between\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"students__white-space\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"students d-flex flex-column align-items-center p-0 \",\n      children: [/*#__PURE__*/_jsxDEV(StudentsTopNav, {\n        className: \"students__topNav\",\n        filterDataByAll: filterDataByAll,\n        filterDataByFullTime: filterDataByFullTime,\n        filterDataBySelfPaced: filterDataBySelfPaced,\n        filterDataByCorporate: filterDataByCorporate,\n        enrolledFilter: enrolledFilter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(StudentSearchBar, {\n        generateSearchResults: generateSearchResults,\n        sortStudents: sortStudents,\n        changeToGridView: changeToGridView,\n        changeToBurgerView: changeToBurgerView,\n        sortOption: sortOption,\n        filterStudentsByCourse: filterStudentsByCourse,\n        filterOption: filterOption\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(StudentTable, {\n        studentsData: studentsData,\n        pageData: pageData,\n        toggleView: toggleView,\n        totalNumberStudents: totalNumberStudents,\n        switchToPreviousPage: switchToPreviousPage,\n        switchToNextPage: switchToNextPage,\n        changeNumberOfRows: changeNumberOfRows,\n        numberOfRows: numberOfRows,\n        firstIndex: firstIndex,\n        secondIndex: secondIndex\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"students__white-space\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 9\n  }, this);\n};\n\n_s(StudentsList, \"wOtrtmqxjJTeXrBBnChEDVzmZVs=\");\n\n_c = StudentsList;\nexport default StudentsList;\n\nvar _c;\n\n$RefreshReg$(_c, \"StudentsList\");","map":{"version":3,"sources":["/Users/reshmydevaraju/Development/_charlie/src/pages/students/students-list/students-list.jsx"],"names":["React","useEffect","useState","StudentsTopNav","StudentTable","StudentSearchBar","Data","StudentsList","studentsData","setStudentsData","pageData","setPageData","pageNumber","setPageNumber","numberOfRows","setNumberOfRows","totalNumberStudents","setTotalNumberStudents","length","enrolledFilter","setEnrolledFilter","toggleView","setToggleView","enrollmentData","setEnrollmentData","sortOption","setSortOption","filterOption","setFilterOption","fetchStudentData","sort","a","b","studentName","localeCompare","changeToGridView","changeToBurgerView","changeNumberOfRows","e","target","value","displayStudents","firstSliceIndex","secondSliceIndex","slice","switchToNextPage","newPageNumber","Math","ceil","switchToPreviousPage","filterDataByAll","filterDataByFullTime","filter","student","enrolledType","includes","filterDataBySelfPaced","filterDataByCorporate","generateSearchResults","filteredData","toLowerCase","enrolledOn","githubAccount","portfolio","sortStudents","studentCopy","reverse","filterStudentsByCourse","firstIndex","secondIndex"],"mappings":"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","sourcesContent":["import React,{useEffect, useState }  from 'react'\nimport StudentsTopNav from \"./students-top-nav/students-top-nav\"\nimport StudentTable from \"./student-table/student-table\";\nimport StudentSearchBar from './student-searchbar/student-searchbar';\nimport \"./students-list.scss\"; \nimport Data from \"../../../data/students.js\"; \n\nconst StudentsList = () => {\n    const [studentsData, setStudentsData] = useState([]); \n    const [pageData, setPageData] = useState([]);\n    const [pageNumber, setPageNumber] = useState(1);  \n    const [numberOfRows, setNumberOfRows] = useState(8); \n    const [totalNumberStudents, setTotalNumberStudents] = useState(studentsData.length); \n    const [enrolledFilter, setEnrolledFilter] = useState(\"All\");\n    const [toggleView, setToggleView] = useState(false); \n    const [enrollmentData, setEnrollmentData] = useState(Data); \n    const [sortOption, setSortOption] = useState(\"1\");\n    const [filterOption, setFilterOption] = useState(\"1\");\n\n    const fetchStudentData = () => {\n        setStudentsData(Data.sort((a,b) => a.studentName.localeCompare(b.studentName)));\n    }\n    const changeToGridView =() => {\n        setToggleView(true);\n        setPageNumber(1);\n    }\n    const changeToBurgerView = () => {\n        setToggleView(false);\n        setPageNumber(1);\n    }\n    const changeNumberOfRows = (e) => {\n        setPageNumber(1);\n        setNumberOfRows(e.target.value);\n    }\n    const displayStudents = () => {\n        const firstSliceIndex = numberOfRows*pageNumber-numberOfRows;\n        const secondSliceIndex = numberOfRows*pageNumber;\n        setPageData(studentsData.slice((firstSliceIndex), (secondSliceIndex)));\n        setTotalNumberStudents(studentsData.length); \n    }\n    const switchToNextPage = () => {\n        let newPageNumber = pageNumber+1;\n        if(newPageNumber-1 !== Math.ceil(totalNumberStudents/numberOfRows)){\n            setPageNumber(newPageNumber);\n            displayStudents(newPageNumber);\n        }   \n    }\n    const switchToPreviousPage = () => {\n        const newPageNumber= pageNumber-1;\n        if(newPageNumber!==0){\n            setPageNumber(newPageNumber)\n            displayStudents(newPageNumber);\n        }\n    }\n    const filterDataByAll = () => {\n        setSortOption(\"1\");\n        setFilterOption(\"1\");\n        setPageNumber(1);\n        setEnrolledFilter(\"All\");\n        fetchStudentData();\n        setEnrollmentData(Data);  \n        }\n    const filterDataByFullTime = () => {\n        setSortOption(\"1\");\n        setFilterOption(\"1\");\n        setPageNumber(1);\n        setEnrolledFilter(\"Full-Time\");\n        setStudentsData(Data.filter(student => student.enrolledType.includes(\"Full-Time\")));\n        setEnrollmentData(Data.filter(student => student.enrolledType.includes(\"Full-Time\")));\n    }\n    const filterDataBySelfPaced = () => {\n        setSortOption(\"1\");\n        setFilterOption(\"1\");\n        setPageNumber(1);\n        setEnrolledFilter(\"Self-Paced\");\n        setStudentsData(Data.filter(student => student.enrolledType.includes(\"Self-Paced\")));\n        setEnrollmentData(Data.filter(student => student.enrolledType.includes(\"Self-Paced\")));\n    }\n    const filterDataByCorporate = () => {\n        setSortOption(\"1\");\n        setFilterOption(\"1\");\n        setEnrolledFilter(\"Corporate\");\n        setPageNumber(1);\n        setStudentsData(Data.filter(student =>student.enrolledType.includes(\"Corporate\")));\n        setEnrollmentData(Data.filter(student =>student.enrolledType.includes(\"Corporate\")));\n    }\n\n    const generateSearchResults = (e) => { \n        if (e.target.value){\n            setPageNumber(1); \n        const filteredData = enrollmentData.filter(student=> {\n            return (\n            student.studentName.toLowerCase().includes(e.target.value.toLowerCase()) ||\n            student.enrolledOn.toLowerCase().includes(e.target.value.toLowerCase()) ||\n            student.githubAccount.toLowerCase().includes(e.target.value.toLowerCase()) ||\n            student.portfolio.toLowerCase().includes(e.target.value.toLowerCase()));\n        }) \n        setStudentsData(filteredData); \n    } else {\n        switch(enrolledFilter) {\n            case \"All\":\n                filterDataByAll();\n                break;\n            case \"Self-Paced\":\n                filterDataBySelfPaced();\n                break;\n            case \"Full-Time\":\n                filterDataByFullTime();\n                break;\n            case \"Corporate\":\n                filterDataByCorporate();\n                break;\n            default:\n                filterDataByAll(); \n        }\n    }\n};\n\n// Sorting logic (A-Z, Z-A) - THIS NEEDS FIXING // needs fixing man-0--\n    const sortStudents = (e) => {\n        if(e.target.value === \"1\"){\n            setSortOption(\"1\");\n            const studentCopy = [...studentsData];\n            studentCopy.sort((a, b)=> a.studentName.localeCompare(b.studentName))\n            setStudentsData(studentCopy);\n        }else if (e.target.value === \"2\"){\n            setSortOption(\"2\");\n            const studentCopy = [...studentsData];\n            studentCopy.sort((a, b)=> a.studentName.localeCompare(b.studentName)).reverse()\n            setStudentsData(studentCopy);\n        }\n    }\n\n    const filterStudentsByCourse = (e) => {\n        if (e.target.value === \"1\") {\n            setFilterOption(\"1\");\n            setStudentsData(enrollmentData)\n        }else if (e.target.value === \"2\") {\n            setFilterOption(\"2\");\n            setStudentsData((enrollmentData.filter(student => student.enrolledOn.includes(\"Mariana\"))));\n        }else if (e.target.value === \"3\") {\n            setFilterOption(\"3\");\n            setStudentsData((enrollmentData.filter(student => student.enrolledOn.includes(\"Ibiza\"))));\n        }else if (e.target.value === \"4\") {\n            setFilterOption(\"4\");\n            setStudentsData((enrollmentData.filter(student => student.enrolledOn.includes(\"Jersey\"))));\n        } else {\n            setFilterOption(\"5\");\n            setStudentsData((enrollmentData.filter(student => student.enrolledOn.includes(\"Hawaii\"))));\n        }\n    }\n\n    // useEffect Calls\n\n    useEffect(fetchStudentData, []); \n    useEffect(displayStudents, [studentsData, pageNumber, numberOfRows]);\n    \n    // The following logic is for the row selection portion of the PageNavigator component. It is placed here as PageNavigator is a presentational component. \n\n    const firstIndex = numberOfRows*pageNumber-numberOfRows;\n    let secondIndex;\n    pageData.length < numberOfRows ? secondIndex = pageData.length + firstIndex : secondIndex = numberOfRows*pageNumber;\n    \n    return (\n        <div className=\"main col-10 m-0 d-flex justify-content-between\">\n            <div className=\"students__white-space\"></div>\n                <div className=\"students d-flex flex-column align-items-center p-0 \">\n                    <StudentsTopNav className=\"students__topNav\" \n                    filterDataByAll={filterDataByAll}\n                    filterDataByFullTime={filterDataByFullTime}\n                    filterDataBySelfPaced={filterDataBySelfPaced}\n                    filterDataByCorporate={filterDataByCorporate}\n                    enrolledFilter={enrolledFilter}/>\n                    <StudentSearchBar \n                    generateSearchResults={generateSearchResults} \n                    sortStudents={sortStudents}\n                    changeToGridView={changeToGridView}\n                    changeToBurgerView={changeToBurgerView}\n                    sortOption={sortOption}\n                    filterStudentsByCourse={filterStudentsByCourse}\n                    filterOption={filterOption}/>\n                    <StudentTable \n                    studentsData={studentsData} \n                    pageData={pageData}\n                    toggleView={toggleView}\n                    totalNumberStudents={totalNumberStudents}\n                    switchToPreviousPage={switchToPreviousPage}\n                    switchToNextPage={switchToNextPage}\n                    changeNumberOfRows = {changeNumberOfRows}\n                    numberOfRows={numberOfRows}\n                    firstIndex={firstIndex}\n                    secondIndex={secondIndex}/>\n                </div>\n            <div className=\"students__white-space\"></div>\n        </div>\n    )\n}\nexport default StudentsList; \n"]},"metadata":{},"sourceType":"module"}